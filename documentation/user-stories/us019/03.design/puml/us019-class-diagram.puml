@startuml
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam classAttributeIconSize 0

package "UI" {
    class CheckHasSufficientStockOrderUI {
    }
}

package "Controller" {
    class OrderController {
        +getOrders() : List<Order>
    }

    class ProductionController {
        +getInsufficientRawMaterialStockForOrder(orderID) : List<RawMaterial>
    }
}

package "Service" {
    class OrderService {
        +getOrders() : List<Order>
        +getOrderByID(orderID) : Order
    }

    class ProductionService {
        +getInsufficientRawMaterialStockForOrder(orderID) : List<RawMaterial>
    }
}

package "Repository" {
    class Repositories {
        -Repositories()
        +getInstance() : Repositories
        +getOrderRepository() : OrderRepository
        +getProductionTree() : ProductionTreeRepository
    }

    class OrderRepository {
        +getAll() : List<Order>
        +getByID(orderID) : Order
    }

    class ProductionTreeRepository {
        +getProductionHierarchy(productID) : HashMap<ProductionElement, Integer>
    }
}

package "Model" {
    class Part {
        -id : String
        -name : String
        -description : String
        +Part(id, name, description)
    }

    class RawMaterial {
        -currentStock : int
        -minimumStock : int
        +RawMaterial(id, name, description)
    }

    class Product {
        -category : ProductCategory
        -capacity : int
        -size : int
        -color : String
        -price : double
        +Product(id, name, description, category, capacity, size, color, price)
    }

    class ProductionElement {
        -part : Part
        -operation : Operation
        -quantity : Double
        +ProductionElement(part, operation, quantity)
    }

    class Operation {
        -id : int
        -type : OperationType
        -name : String
        -executionTime : int
        +Operation(id, type, name, executionTime)
    }

    class Order {
        -orderID : int
        -deliveryAddress : Address
        -orderDate : Date
        -deliveryDate : Date
        -price : double
        -state : ProcessState
        -productQuantity : Map<Product, Integer>
        +Order(orderID, deliveryAddress, orderDate, deliveryDate, price, productQuantity)
    }
}

package "Exception" {
    class ProductException {
        +productionTreeNotFound(productID) : ProductException
    }

    class OrderException {
        +orderNotFound(orderID) : OrderException
    }

    class RuntimeException
}

CheckHasSufficientStockOrderUI ..> OrderController
CheckHasSufficientStockOrderUI ..> ProductionController
OrderController ..> OrderService
ProductionController ..> ProductionService
ProductionController ..> OrderService
OrderService ..> Repositories : repositories
OrderService ..> OrderRepository : orderRepository
OrderService ..> Order : order
ProductionService ..> Repositories : repositories
ProductionService ..> ProductionTreeRepository : productionTreeRepository
ProductionService ..> Product : product
ProductionService ..> ProductionElement : productionElement
ProductionService ..> RawMaterial : rawMaterial
Repositories --> Repositories : instance
Repositories "1" --> "1" OrderRepository : orderRepository
Repositories "1" --> "1" ProductionTreeRepository : productionTreeRepository
OrderRepository "1" --> "*" Order : categories
ProductionTreeRepository "1" --> "*" ProductionElement : categories
Product --|> Part
RawMaterial --|> Part
ProductionElement --> Part : has
ProductionElement --> Operation : has
ProductionService ..> ProductException : throws
ProductException --|> RuntimeException
OrderService ..> OrderException : throws
OrderException --|> RuntimeException

@enduml